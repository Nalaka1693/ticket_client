package service;

import java.util.ArrayList;
import java.util.Enumeration;

import cache.Cache;
import cache.UnitInventory;
import model.RequestProcessor;
import servicelib.AvailabilityResponse;
import servicelib.Request;


import javax.servlet.http.HttpServletRequest;

public class AvailabilityService {
	private Cache cache;
	private RequestProcessor reqProcessor;
	
	public AvailabilityService() {
		this.cache = Cache.getInstance();
		this.cache.populatePriceMap("");
		this.cache.populateInventory();
		this.reqProcessor = new RequestProcessor();
	}
	
	public Request buildRequestObj(HttpServletRequest request) {
		Enumeration<String> parameterNames = request.getParameterNames();
		 
        while (parameterNames.hasMoreElements()) { 
            String paramName = parameterNames.nextElement();
            out.write(paramName);
            out.write("n");
 
            String[] paramValues = request.getParameterValues(paramName);
            for (int i = 0; i < paramValues.length; i++) {
                String paramValue = paramValues[i];
                out.write("t" + paramValue);
                out.write("n");
            } 
        }
		return null;
	}
	
	public int processAvailabilityRequest(Request request) {
		int totalPrice = 0;
		ArrayList<UnitInventory> unitInvs = this.reqProcessor.getUnitInventories(request);
		
		for (UnitInventory key : unitInvs) {
			int price = cache.getAvailability(key, request.getNumOfTickets());
			if (price == 0) {
				return 0;
			}
			
			totalPrice += price;
		}
		
		return totalPrice * request.getNumOfTickets();		
	}
	
	public int processReservationRequest(Request request) {
		int totalPrice = 0;
		ArrayList<UnitInventory> unitInvs = this.reqProcessor.getUnitInventories(request);
		
		for (UnitInventory key : unitInvs) {
			int price = cache.setReservation(key, request.getNumOfTickets());
			if (price == 0) {
				return 0;
			}
			
			totalPrice += price;
		}
		
		return totalPrice * request.getNumOfTickets();		
	}
	
	public AvailabilityResponse createResponse(Request request, int totalPrice) {
		if (totalPrice > 0) {
			return new AvailabilityResponse(request.getOriginCity(),
					request.getDestinationCity(), request.getNumOfTickets(), totalPrice);
		} else {
			return new AvailabilityResponse();
		}
	}
}
