package service;

import java.util.ArrayList;
import java.util.Enumeration;

import javax.servlet.http.HttpServletRequest;

import cache.Cache;
import cache.UnitInventory;
import model.RequestProcessor;
import servicelib.AvailabilityResponse;
import servicelib.Request;

public class AvailabilityService {
	private Cache cache;
	private RequestProcessor reqProcessor;

	public AvailabilityService() {
		this.cache = Cache.getInstance();
		this.cache.populatePriceMap("");
		this.cache.populateInventory();
		this.reqProcessor = new RequestProcessor();
	}
	
	public boolean validateRequest(Request request) {
		// TODO check the validity of the request 
		return true;
	}		

	public Request buildRequestObj(HttpServletRequest request) {
		Request reqObj = new Request();		
		
		reqObj.setOriginCity(request.getParameter("originCity"));
		reqObj.setDestinationCity(request.getParameter("destinationCity"));
		reqObj.setNumOfTickets(Integer.valueOf(request.getParameter("numOfTickets")));

//		Enumeration<String> parameterNames = request.getParameterNames();
//
//		while (parameterNames.hasMoreElements()) {
//			String paramName = parameterNames.nextElement();
//			String[] paramValues = request.getParameterValues(paramName);
//
//			if (paramName.equals("originCity")) {
//				reqObj.setOriginCity(paramValues[0]);
//			} else if (paramName.equals("destinationCity")) {
//				reqObj.setDestinationCity(paramValues[0]);				
//			} else if (paramName.equals("numOfTickets")) {
//				reqObj.setNumOfTickets(Integer.valueOf(paramValues[0]));				
//			}			
//		}
		
		return reqObj;
	}

	public int processAvailabilityRequest(Request request) {
		if (!validateRequest(request)) {
			// TODO send bad request response
		}
		
		int totalPrice = 0;
		ArrayList<UnitInventory> unitInvs = this.reqProcessor.getUnitInventories(request);

		for (UnitInventory key : unitInvs) {
			int price = cache.getAvailability(key, request.getNumOfTickets());
			if (price == 0) {
				return 0;
			}

			totalPrice += price;
		}

		return totalPrice * request.getNumOfTickets();
	}

	public int processReservationRequest(Request request) {
		int totalPrice = 0;
		ArrayList<UnitInventory> unitInvs = this.reqProcessor.getUnitInventories(request);

		for (UnitInventory key : unitInvs) {
			int price = cache.setReservation(key, request.getNumOfTickets());
			if (price == 0) {
				return 0;
			}

			totalPrice += price;
		}

		return totalPrice * request.getNumOfTickets();
	}

	public AvailabilityResponse createResponse(Request request, int totalPrice) {
		if (totalPrice > 0) {
			return new AvailabilityResponse(request.getOriginCity(), request.getDestinationCity(),
					request.getNumOfTickets(), totalPrice);
		} else {
			return new AvailabilityResponse();
		}
	}
}
