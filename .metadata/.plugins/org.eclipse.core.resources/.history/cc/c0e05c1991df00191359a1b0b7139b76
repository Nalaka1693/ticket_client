package servicelib;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;

import servicelib.AvailabilityResponse;
import servicelib.Request;

public class HttpService {
	
	public Object sendGet(String getUrl, Request req) throws Exception {		
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("originCity", req.getOriginCity());
		parameters.put("destinationCity", req.getDestinationCity());
		parameters.put("numOfTickets", String.valueOf(req.getNumOfTickets()));
		
		getUrl += "?" + ParameterStringBuilder.getParamsString(parameters);
		URL obj = new URL(getUrl);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		// optional default is GET
		con.setRequestMethod("GET");

		//add request header
		con.setRequestProperty("User-Agent", "Mozilla/5.0");

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'GET' request to URL : " + getUrl);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		
		in.close();

		//print result
		System.out.println("PPPPPP" + response.toString());		
		
		Gson gson = new Gson();	
		AvailabilityResponse res = gson.fromJson(response.toString(), AvailabilityResponse.class);
		
		return res;		
	}
	
	public Object sendPost(String postUrl, Request req) throws Exception {
		Gson gson = new Gson();
		URL url = new URL(postUrl);
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		con.setRequestMethod("POST");
		con.setRequestProperty("Content-Type", "application/json; utf-8");
		con.setRequestProperty("Accept", "application/json");
		con.setDoOutput(true);
		
		String json = gson.toJson(req);
		try {
			OutputStream os = con.getOutputStream();
		    byte[] input = json.getBytes("utf-8");
		    os.write(input, 0, input.length);           
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		StringBuilder response = new StringBuilder();
		
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), "utf-8"));		    
		    String responseLine = null;
		    while ((responseLine = br.readLine()) != null) {
		        response.append(responseLine.trim());
		    }
		    System.out.println(response.toString());
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		AvailabilityResponse res = gson.fromJson(response.toString(), AvailabilityResponse.class);
		
		return res;
    }
}
