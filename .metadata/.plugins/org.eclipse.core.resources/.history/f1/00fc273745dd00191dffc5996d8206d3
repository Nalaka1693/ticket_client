package service;

import java.util.ArrayList;

import cache.Cache;
import cache.UnitInventory;
import model.RequestProcessor;
import servicelib.AvailabilityResponse;
import servicelib.Request;

public class AvailabilityService {
	private Cache cache;
	private RequestProcessor reqProcessor;
	
	public AvailabilityService() {
		this.cache = Cache.getInstance();
		this.cache.populatePriceMap("");
		this.cache.populateInventory();
		this.reqProcessor = new RequestProcessor();
	}
	
	public int processAvailabilityRequest(Request request) {
		int totalPrice = 0;
		ArrayList<UnitInventory> unitInvs = this.reqProcessor.getUnitInventories(request);
		
		for (UnitInventory key : unitInvs) {
			int price = cache.getAvailability(key, request.getNumOfTickets());
			if (price == 0) {
				return 0;
			}
			
			totalPrice += price;
		}
		
		return totalPrice * request.getNumOfTickets();		
	}
	
	public int processReservationRequest(Request request) {
		System.out.println(request.getDestinationCity());
		int totalPrice = 0;
		ArrayList<UnitInventory> unitInvs = this.reqProcessor.getUnitInventories(request);
		
		for (UnitInventory key : unitInvs) {
			int price = cache.setReservation(key, request.getNumOfTickets());
			if (price == 0) {
				return 0;
			}
			
			totalPrice += price;
		}
		
		return totalPrice * request.getNumOfTickets();		
	}
	
	public AvailabilityResponse createResponse(Request request, int totalPrice) {
		if (totalPrice > 0) {
			return new AvailabilityResponse(request.getOriginCity(),
					request.getDestinationCity(), request.getNumOfTickets(), totalPrice);
		} else {
			return new AvailabilityResponse();
		}
	}
}
